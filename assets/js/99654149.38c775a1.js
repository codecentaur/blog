"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[870],{1704:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var r=n(9620),a=n(4848),s=n(8453);const o={slug:"adding-learner",title:"Adding Learner",tags:["math-learner"]},i=void 0,d={authorsImageUrls:[]},l=[{value:"Data Generation",id:"data-generation",level:3}];function c(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"In this post, I'm going to describe building a simple neural network using PyTorch that learns to add two numbers."}),"\n",(0,a.jsx)(t.h3,{id:"data-generation",children:"Data Generation"}),"\n",(0,a.jsxs)(t.p,{children:["First, I'll define a method that generates the data. This method returns two tensors. The first tensor, ",(0,a.jsx)(t.code,{children:"x"}),", is the input to the model, and the second tensor, ",(0,a.jsx)(t.code,{children:"y"}),", is the expected output (the sum of the pairs of numbers)."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"def generate_data(num_samples=1000):\n    x = torch.randint(0, 100, (num_samples, 2), dtype=torch.float32)\n    y = torch.sum(x, dim=1, keepdim=True)\n    return x, y\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(6540);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}},9620:e=>{e.exports=JSON.parse('{"permalink":"/blog/adding-learner","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-07-30-adding-learner.md","source":"@site/blog/2024-07-30-adding-learner.md","title":"Adding Learner","description":"In this post, I\'m going to describe building a simple neural network using PyTorch that learns to add two numbers.","date":"2024-07-30T00:00:00.000Z","tags":[{"inline":true,"label":"math-learner","permalink":"/blog/tags/math-learner"}],"readingTime":3.91,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"adding-learner","title":"Adding Learner","tags":["math-learner"]},"unlisted":false,"prevItem":{"title":"MNIST Autoencoder","permalink":"/blog/MNIST-autoencoder"}}')}}]);